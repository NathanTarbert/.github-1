name: Run Bats Test
description: Run Bats Test On CI

inputs:
  perform_ockam_enroll:
    description: "Perform Ockam Enroll"
    required: true
  script_path:
    description: "Enrollment Script Path"
    required: true
  ockam_repository_ref:
    description: "Ref From Which To Build Ockam Command"
    required: false
  controller_id:
    description: "Controller ID Of Ockam Command"
    required: false
  controller_addr:
    description: "Controller Address Of Ockam Command"
    required: false
  use_last_release_tag:
    description: "Run Bats Test On Last Release Tag"
    required: false
  email_address:
    description: "Emaill Address To Run Ockam Enroll"
    required: false
    default: "test@ockam.io"
  cache_ockam_build_deps:
    description: "Cache Ockam Build Dependencies"
    required: false
    default: true
  cache_key:
    description: "Cache Restore Key" 

runs:
  using: "composite"

  steps:
    - shell: bash
      run: |
        echo "OCKAM_DISABLE_UPGRADE_CHECK=1"  >> $GITHUB_ENV
        echo "====> ${{ inputs.ockam_repository_ref }} Ockam ref here"
        if [[ -n "${{ inputs.controller_id }}" ]]; then
          echo "OCKAM_CONTROLLER_IDENTITY_ID=${{ inputs.controller_id }}" >> $GITHUB_ENV
          echo "OCKAM_CONTROLLER_ADDR=${{ inputs.controller_addr }}" >> $GITHUB_ENV
        fi

    - if: ${{ inputs.perform_ockam_enroll == 'false' }}
      shell: bash
      run: |
        set -ex
        mkdir /github/home/.local
        cp -r /configs/.ockam /github/home

        ls /github/home

    - uses: actions/checkout@bf085276cecdb0cc76fbbe0687a5a0e786646936
      with:
        ref: ${{ inputs.ockam_repository_ref }}
        repository: build-trust/ockam
        path: ockam

    - shell: bash
      working-directory: ockam
      id: ockam_ref
      run: |
        if [[ -n "${{ inputs.use_last_release_tag }}" ]]; then
          last_git_tag=$(git describe --tags --abbrev=0)
          git checkout $last_git_tag
        fi

    - uses: actions/cache@04f198bf0b2a39f7230a4304bf07747a0bddf146
      if: ${{ inputs.cache_ockam_build_deps == 'true' }}
      with:
        path: |
          /usr/rust/cargo/bin
          /usr/rust/cargo/registry/index
          /usr/rust/cargo/registry/cache
          /usr/rust/cargo/git/db
        key: cache-ockam-bats-local-home

    - uses: actions/cache@04f198bf0b2a39f7230a4304bf07747a0bddf146
      id: ockam_bin_cache
      with:
        path: ockam/target
        restore-keys: ${{ inputs.cache_key == '' && 'cache-ockam-bats-target-' || inputs.cache_key }}
        key: ${{ inputs.cache_key == '' && format('cache-ockam-bats-target-{0}', hashFiles('**/Cargo.lock')) || inputs.cache_key }}

    - working-directory: ockam
      shell: bash
      run: |
        set -ex
        echo $OCKAM_DISABLE_UPGRADE_CHECK

        # Only build ockam binary if cache wasn't found
        if [[ '${{ inputs.cache_ockam_build_deps }}' == 'true' || '${{ steps.ockam_bin_cache.outputs.cache-hit }}' == 'false' || -z '${{ steps.ockam_bin_cache.outputs.cache-hit }}' ]]; then
          cargo build --bin ockam
        fi

        echo "PATH=$(pwd)/target/debug:$PATH" >> $GITHUB_ENV
        ./target/debug/ockam --version

    - shell: bash
      if: ${{ inputs.perform_ockam_enroll == 'true' }}
      run: |
        set -ex
        SCRIPT_DIR="${{ inputs.script_path }}" EMAIL_ADDRESS="${{ inputs.email_address }}" bash ${{ inputs.script_path }}/ockam_enroll.sh
        ls /github/home

    - shell: bash
      working-directory: ockam/implementations/rust/ockam/ockam_command/tests
      run: |
        set -ex;
        ockam project list --output json
        ls -a /github/home
        ORCHESTRATOR_TESTS=1 LONG_TESTS=1 bats bats;

        echo "Bats passed...."

    - shell: bash
      working-directory: ockam
      if: ${{ inputs.cache_ockam_build_deps == 'true' }}
      run: |
        crates=($(cargo metadata --no-deps --format-version 1 | jq -r '.workspace_members[] | split(" ")  | .[0] | gsub("-";"_")'))
        # Get target folder size
        du -sh target
        rm -rf ./target/debug/examples
        rm -rf ./target/debug/incremental
        for mode in debug release; do
          for dir in deps .fingerprint build; do
            if [ -d "target/$mode/$dir" ]; then
              cd "target/$mode/$dir"
              for crate in "${crates[@]}"; do rm -rf $crate* lib$crate*; done
              cd -
            fi
          done
        done
        du -sh target

    - if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: ockam-logs-${{ inputs.controller_addr == '' && 'prod' || 'dev' }}-${{ inputs.perform_ockam_enroll == 'true' && 'new_enroll' || 'cached_enroll' }}
        path: /github/home/.bats-tests

    - if: ${{ always() }}
      shell: bash
      run: |
        set -ex

        ls $HOME/.bats-tests

        echo "Clearing resources......"
        ockam space list --output json

        projects=$(ockam project list --output json)
        projects_length=$(jq '.|length' <<< $projects)

        default_project_space_name=""

        for (( c=0; c<$projects_length; c++ )); do
          project_space_name=$(jq -r ".[$c].space_name" <<< $projects)
          project_name=$(jq -r ".[$c].name" <<< $projects)

          if [[ "$project_name" != "default" || ${{ inputs.perform_ockam_enroll }} == 'true' ]]; then
            ockam project delete $project_space_name $project_name
            continue
          fi

          # Save default project space name
          default_project_space_name=$project_space_name
        done

        space_names=$(ockam space list --output json)
        space_name_length=$(jq '.|length' <<< $space_names)

        for (( c=0; c<$space_name_length; c++ )); do
          space_name=$(jq -r ".[$c].name" <<< $space_names)
          if [[ $space_name == $default_project_space_name ]]; then
            continue
          fi

          ockam space delete $space_name
        done
